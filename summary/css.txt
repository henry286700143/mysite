css

id 选择器常常用于建立派生选择器。

类名的第一个字符不能使用数字！它无法在 Mozilla 或 Firefox 中起作用

派生选择器
.fancy td
基于类而被选择
td.fancy


CSS背景：
背景色：background-color
背景图像：background-image
背景重复：background-repeat
背景定位：background-position
背景关联：background-attachment（明图像相对于可视区是固定的（fixed））

CSS文本
缩进文本：text-indent
水平对齐：text-align
字间隔: word-spacing
字母间隔：letter-spacing
字符转换: text-transform
文本装饰: text-decoration
处理空白符: white-space
文本方向: direction
行高（行间距）：line-height

CSS 字体
font-family：制度字体
font-style：字体风格
font-variant：字体变形
font-weight:字体加粗
font-size：字体大小

CSS 链接
链接的四种状态：
a:link - 普通的、未被访问的链接
a:visited - 用户已访问的链接
a:hover - 鼠标指针位于链接的上方
a:active - 链接被点击的时刻

CSS 列表
list-style:列表样式

CSS 表格
th 元素内部的文本通常会呈现为居中的粗体文本，而 td 元素内的文本通常是左对齐的普通文本。
表格边框：border
折叠边框：border-collapse
水平对齐方式：text-align 
垂直对齐方式：vertical-align
内容与边框的距离：padding 


CSS 轮廓
outline：轮廓属性


CSS 框模型
元素框的最内部分是实际的内容，直接包围内容的是内边距。内边距呈现了元素的背景。内边距的边缘是边框。边框以外是外边距，外边距默认是透明的，因此不会遮挡其后的任何元素。

背景应用于由内容和内边距、边框组成的区域。

在 CSS 中，width 和 height 指的是内容区域的宽度和高度。增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸。

内边距、边框和外边距可以应用于一个元素的所有边，也可以应用于单独的边。内边距、边框和外边距可以应用于一个元素的所有边，也可以应用于单独的边。

外边距 margin 可以是负值，而且在很多情况下都要使用负值的外边距。
-------------------------见下面

用四个div实现5条1像素的左右边框，就像表格一样的效果，就可以使用让每个div都有左右1像素的边框，然后margin-right:-1px;或是margin-left:-1px;让之间的边框重叠，这样就实现了四标签实现5边框的效果了。


padding 属性接受长度值或百分比值，但不允许使用负值。

百分数值是相对于其父元素的 width 计算的

每个边框有 3 个方面：宽度、样式，以及颜色


边框绘制在“元素的背景之上”

元素的背景是内容、内边距和边框区的背景

边框样式：border-style
边框宽度：border-width

border-style 的默认值是 none，如果没有声明样式，就相当于 border-style: none。

边框颜色：border-color
透明边框：border-color: transparent;

值复制：（上，右，下，左）
如果缺少左外边距的值，则使用右外边距的值。
如果缺少下外边距的值，则使用上外边距的值。
如果缺少右外边距的值，则使用上外边距的值。

CSS 外边距合并
当两个垂直(上下)外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。
水平边距永远不会重合.

假设有一个空元素，它有外边距，但是没有边框或填充。在这种情况下，上外边距与下外边距就碰到了一起，它们会发生合并。所有外边距都合并到一起，形成了一个小的外边距。

有普通文档流中块框的垂直外边距才会发生外边距合并。行内框、浮动框或绝对定位之间的外边距不会合并。



CSS 定位
一切皆为框
div、h1 或 p 元素常常被称为块级元素。这意味着这些元素显示为一块内容，即“块框”。与之相反，span 和 strong 等元素称为“行内元素”，这是因为它们的内容显示在行中，即“行内框”。

使用 display 属性改变生成的框的类型。这意味着，通过将 display 属性设置为 block，可以让行内元素（比如 <a> 元素）表现得像块级元素一样。还可以通过把 display 设置为 none，让生成的元素根本没有框。这样的话，该框及其所有内容就不再显示，不占用文档中的空间。

CSS 有三种基本的定位机制：普通流、浮动和绝对定位。
普通流中的元素的位置由元素在 (X)HTML 中的位置决定。
块级框从上到下一个接一个地排列，框之间的垂直距离是由框的垂直外边距计算出来。
行内框在一行中水平布置。可以使用水平内边距、边框和外边距调整它们的间距。但是，垂直内边距、边框和外边距不影响行内框的高度。由一行形成的水平框称为行框（Line Box），行框的高度总是足以容纳它包含的所有行内框。不过，设置行高可以增加这个框的高度。

position 属性值的含义：
static
元素框正常生成。块级元素生成一个矩形框，作为文档流的一部分，行内元素则会创建一个或多个行框，置于其父元素中。

relative	相对定位
元素框偏移某个距离。元素仍保持其未定位前的形状，它原本所占的空间仍保留。

absolute    绝对定位，相对于static 定位以外的第一个父元素进行定位。
元素框从文档流完全删除，并相对于其包含块定位。包含块可能是文档中的另一个元素或者是初始包含块。元素原先在正常文档流中所占的空间会关闭，就好像元素原来不存在一样。元素定位后生成一个块级框，而不论原来它在正常流中生成何种类型的框。

fixed	绝对定位，相对于浏览器窗口
元素框的表现类似于将 position 设置为 absolute，不过其包含块是视窗本身。

提示：相对定位实际上被看作普通流定位模型的一部分，因为元素的位置相对于它在普通流中的位置。
在使用相对定位时，无论是否进行移动，元素仍然占据原来的空间。因此，移动元素会导致它覆盖其它框。

overflow	设置当元素的内容溢出其区域时发生的事情。
clip	设置元素的形状。元素被剪入这个形状之中，然后显示出来。
vertical-align	设置元素的垂直对齐方式。
z-index	设置元素的堆叠顺序。

绝对定位使元素的位置与文档流无关，因此不占据空间。
相对定位是“相对于”元素在文档中的初始位置，而绝对定位是“相对于”最近的已定位祖先元素，如果不存在已定位的祖先元素，那么“相对于”最初的包含块。
因为绝对定位的框与文档流无关，所以它们可以覆盖页面上的其它元素。可以通过设置 z-index 属性来控制这些框的堆放次序。

浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。
由于浮动框不在文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样。

float 属性实现元素的浮动

浮动框旁边的行框被缩短，从而给浮动框留出空间，行框围绕浮动框。因此，创建浮动框可以使文本围绕图像

要想阻止行框围绕浮动框，需要对该框应用 clear 属性。clear 属性的值可以是 left、right、both 或 none，它表示框的哪些边不应该挨着浮动框。
clear:both;	图像的左侧和右侧均不允许出现浮动元素

因为浮动元素脱离了文档流，所以包围float的图片和文本的 div 不占据空间。
此时，只能添加一个空元素并且清理它

还有另一种办法，那就是对容器 div 进行浮动

然而下一个元素会受到这个浮动元素的影响。为了解决这个问题，有些人选择对布局中的所有东西进行浮动，然后使用适当的有意义的元素（常常是站点的页脚）对这些浮动进行清理。这有助于减少或消除不必要的标记。


css选择器
选择器分组
h2, p {color:gray;}

通配符选择器
* {color:red;}

在规则的最后一个声明后也加上分号是一个好习惯。

类选择器
*.important {color:red;}

.important {color:red;}

p.important {color:red;}

.important.warning {background:silver;}

ID 选择器前面有一个 # 号
在一个 HTML 文档中，ID 选择器会使用一次，而且仅一次。

属性选择器
如果希望选择有某个属性的元素，而不论属性值是什么，可以使用简单属性选择器。

*[title] {color:red;}

a[href][title] {color:red;}

a[href="http://www.w3school.com.cn/about_us.asp"] {color: red;}
属性与属性值必须完全匹配

p[class~="important"] {color: red;}
如果需要根据属性值中的词列表的某个词进行选择，则需要使用波浪号（~）。

子串匹配属性选择器

特定属性选择类型
*[lang|="en"] {color: red;}

后代选择器
h1 em {color:red;}

两个元素之间的层次间隔可以是无限的。

子元素选择器只能选择作为某元素子元素的元素。
h1 > strong {color:red;}

相邻兄弟选择器
h1 + p {margin-top:50px;}
选择紧接在 h1 元素后出现的段落，h1 和 p 元素拥有共同的父元素

 :first-child 伪类来选择元素的第一个子元素。
p:first-child i
匹配所有作为第一个子元素的 <p> 元素中的所有 <i> 元素

:lang 伪类使你有能力为不同的语言定义特殊的规则。

q:lang(no)
:lang 类为属性值为 no 的 q 元素定义引号的类型

:active	向被激活的元素添加样式。

:first-line 伪元素，用于向文本的首行设置特殊样式。

:first-letter 伪元素，伪元素用于向文本的首字母设置特殊样式

:before，伪元素可以在元素的内容前面插入新内容。

:after，伪元素可以在元素的内容之后插入新内容。






