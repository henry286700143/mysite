git

	初始化一个Git仓库，使用git init命令。

	添加文件到Git仓库，分两步：

	第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；

	第二步，使用命令git commit -m "add distributed"，完成。


	要随时掌握工作区的状态，使用git status命令。

	如果git status告诉你有文件被修改过，用git diff filename可以查看修改内容。

	用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别


	HEAD指向的版本就是当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
	因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

	穿梭前，用git log --pretty=oneline可以查看提交历史，以便确定要回退到哪个版本。

	要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。


	当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，git checkout -- file可以丢弃工作区的修改，就是让这个文件回到最近一次git commit或git add时的状态。

	当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
	git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区


	用命令git rm删掉，并且git commit
	git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
创建远程仓库
	创建SSH Key
	ssh-keygen -t rsa -C "youremail@example.com"

	用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件。在github中添加id_rsa.pub

	创建关联库
	Create a new repo

	在本地的mysite仓库下运行命令
	git remote add origin https://github.com/henry286700143/mysite.git

	把本地库的所有内容推送到远程库上
	git push -u origin master

	本地作了提交，把本地master分支的最新修改推送至GitHub
	git push origin master
	git push origin dev（推送dev分支）

	先创建远程库，然后，从远程库克隆。

	登陆GitHub，创建一个新的仓库

	勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件。

	git clone克隆一个本地库
	git clone git@github.com:henry286700143/newproject.git

	Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
	GitHub给出的地址不止一个，还可以用https://github.com/henry286700143/gitskills.git这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。
	使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
分支管理
	查看分支：git branch，当前分支前面会标一个*号。

	创建分支：git branch <name>

	切换分支：git checkout <name>

	创建+切换分支：git checkout -b <name>

	合并某分支到当前分支：git merge <name>

	删除分支：git branch -d <name>

	Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容

	用git log --graph命令可以看到分支合并图。git log --graph --pretty=oneline --abbrev-commit

	master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；

	干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；

	每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。

	合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
	git merge --no-ff -m "merge with no-ff" dev

	修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

	当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，恢复的同时把stash内容也删了，回到工作现场。

	用git stash list命令查看保存的工作现场

	用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除
	恢复指定的stash：git stash apply stash@{0}

	开发一个新feature（功能），最好新建一个分支；

	如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

	-------------------------------------------
	查看远程库的信息，用git remote -v

	master分支是主分支，因此要时刻与远程同步；

	dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；

	bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；

	feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。

	总之，就是在Git中，分支完全可以在本地自己藏着玩。

	-------------------------------------------
	在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
	创建本地dev分支：git checkout -b dev origin/dev

	多人协作的工作模式通常是这样：

	首先，可以试图用git push origin branch-name推送自己的修改；

	如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

	如果合并有冲突，则解决冲突，并在本地提交；

	没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

	如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
标签管理
	发布一个版本时，我们通常先在版本库中打一个标签，这样，就唯一确定了打标签时刻的版本。标签也是版本库的一个快照。分支可以移动，标签不能移动。

	切换到需要打标签的分支上
	命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
	git tag v1.0

	git tag -a <tagname> -m "blablabla..."可以指定标签信息；-a指定标签名，-m指定说明文字

	git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；

	命令git tag可以查看所有标签。标签不是按时间顺序列出，而是按字母排序的。

	git show <tagname>查看标签信息

	找到历史提交的commit id，然后打上就可以了。
	git log --pretty=oneline --abbrev-commit
	git tag v0.9 6224937

	命令git push origin <tagname>可以推送一个本地标签；

	命令git push origin --tags可以推送全部未推送过的本地标签；

	删除远程标签，先从本地删除，再从远程删除
	命令git tag -d <tagname>可以删除一个本地标签；

	命令git push origin :refs/tags/<tagname>可以删除一个远程标签。

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
使用GitHub
	点“Fork”就在自己的账号下克隆了一个仓库，然后，从自己的账号下clone：
	git clone git@github.com:henry286700143/bootstrap.git

	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	自定义Git
	Git显示颜色，会让命令输出看起来更醒目：

	git config --global color.ui true

	Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。

	忽略文件的原则是：
	忽略操作系统自动生成的文件，比如缩略图等；
	忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
	忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。

	把.gitignore也提交到Git

	在资源管理器里新建一个.gitignore文件，它会非常弱智地提示你必须输入文件名，但是在文本编辑器里“保存”或者“另存为”就可以把文件保存为.gitignore了。

	.gitignore文件模板下载：https://github.com/github/gitignore

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
搭建Git服务器
	Linux的机器
	安装git
	sudo apt-get install git

	创建一个git用户，用来运行git服务
	sudo adduser git

	创建证书登录
	收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。

	初始化Git仓库
	先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令
	sudo git init --bare sample.git

	服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git
	sudo chown -R git:git sample.git

	禁用shell登录
	第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。
	git:x:1001:1001:,,,:/home/git:/bin/bash
	改为：
	git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell

	克隆远程仓库
	git clone git@server:/srv/sample.git